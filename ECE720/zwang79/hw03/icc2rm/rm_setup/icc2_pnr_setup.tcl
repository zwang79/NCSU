puts "RM-info : Running script [info script]\n"
##########################################################################################
# Tool: IC Compiler II
# Script: icc2_pnr_setup.tcl
# Version: P-2019.03-SP2
# Copyright (C) 2014-2019 Synopsys, Inc. All rights reserved.
##########################################################################################

source -echo ./rm_setup/icc2_common_setup.tcl 

########################################################################################## 
## Variables for init_design inputs (used by init_design.tcl)
##########################################################################################
set INIT_DESIGN_INPUT 		"ASCII"	;# Specify one of the 3 options: ASCII | DC_ASCII | DP_RM_NDM; default is ASCII.
				;# 1.ASCII: assumes all design input files are ASCII and will read them in individually.
				;# 2.DC_ASCII: for design transfer from DC using the write_icc2_files command;
				;#   sources ${DCRM_RESULTS_DIR}/${DCRM_FINAL_DESIGN_ICC2}/${DESIGN_NAME}.icc2_script.tcl;
			      	;#   you can change the default of DC_RESULTS_DIR and DCRM_FINAL_DESIGN_ICC2 below;
				;#   commonly used in combination with SPG flow (set PLACE_OPT_SPG_FLOW true below)  
			      	;# 3.DP_RM_NDM: if ICC2-DP-RM is completed, you can take its NDM outputs and skip the design creation steps;
				;#   for PNR flat (DESIGN_STYLE set to flat), script copies the design library from ICC2-DP-RM release 
				;#   area (specified by RELEASE_DIR_DP) and opens design;    
				;#   for PNR hier flow (DESIGN_STYLE set to hier), script will either copy design library 
				;#   from ICC2-DP-RM release area or in addition to that, copy design library of the child blocks from PNR
				;#   release area (specified by RELEASE_DIR_PNR), and then open design.
#set DCRM_RESULTS_DIR  		"./results" ;# used by DC_ASCII to specify DC-RM output directory. Default is results.   
                                ;# (Rhett Davis) Moved this variable to icc2_common_setup.tcl for use with DP flow
set DCRM_FINAL_DESIGN_ICC2 	"ICC2_files" ;# output directory name generated by DC-RM's write_icc2_files command;
				;# only valid if you specify DC_ASCII for INIT_DESIGN_INPUT;
                                ;# The directory contains verilog, floorplan, scenario settings, and constraints from DC
                                ;# in a format that IC Compiler II can source.    

set POCV_CORNER_FILE_MAPPING_LIST 	"" ;# a list of corner and its associated POCV file in pairs, as POCV is corner dependant;
					;# same corner can have multiple corresponding files;
					;# example: set POCV_CORNER_FILE_MAPPING_LIST "{corner1 file1a} {corner1 file1b} {corner2 file2}";
					;# in the example, file1a and file1b will be loaded for corner1, file2 will be loaded for corner2.
					;# Note: POCV_CORNER_FILE_MAPPING_LIST will take precedence if AOCV_CORNER_TABLE_MAPPING_LIST is also specified
set AOCV_CORNER_TABLE_MAPPING_LIST 	"" ;# a list of corner and its associated AOCV table in pairs, as AOCV is corner dependant;
					;# same corner can have multiple corresponding tables;
					;# example: set AOCV_CORNER_TABLE_MAPPING_LIST "{corner1 table1a} {corner1 table1b} {corner2 table2}";
					;# in the example, table1a and table1b will be loaded for corner1, table2 will be loaded for corner2.
set TCL_PAD_CONSTRAINTS_FILE		"" ;# a Tcl script for your pad constraint commands used by place_io of 
					;# templates/init_design.flat_design_planning_example.tcl sourced by init_design.tcl
set TCL_MV_SETUP_FILE			"" ;# a Tcl script placeholder for your MV setup commands,such as create_voltage_area, 
					;# placement bound, power switch creation and level shifter insertion, etc;
					;# refer to templates/init_design.power_switch_example.tcl for sample commands   
set TCL_PG_CREATION_FILE		"" ;# a Tcl script placeholder for your power ground network creation commands,
					;# such as create_pg*, set_pg_strategy, compile_pg, etc;
set TCL_FLOORPLAN_FILE			"rm_setup/floorplan.tcl" ;# Tcl floorplan file written by the write_floorplan command; for example, floorplan/floorplan.tcl;
					;# TCL_FLOORPLAN_FILE and DEF_FLOORPLAN_FILES are mutually exclusive; please specify only one of them;
					;# Not effective if INIT_DESIGN_INPUT = DC_ASCII or DP_RM_NDM.
					;# The write_floorplan command writes a floorplan.tcl Tcl script and a floorplan.def DEF file;
					;# reading floorplan.tcl alone can restore the entire floorplan - refer to write_floorplan man for more details  
set TCL_ADDITIONAL_FLOORPLAN_FILE 	"" ;# a supplementary Tcl constraint file; sourced after DEF_FLOORPLAN_FILE or TCL_FLOORPLAN_FILE is read, 
					;# or initialize_floorplan is done; can be used to cover additional floorplan constructs, 
					;# such as bounds, pin guides, or route guides, etc; not valid if INIT_DESIGN_INPUT = DC_ASCII or DP_RM_NDM.
set TCL_USER_INIT_DESIGN_POST_SCRIPT ""	;# An optional Tcl file to be sourced at the very end of init_design.tcl before save_block.


########################################################################################## 
## Variables for constraints or settings that impact multiple steps (used across flow)
##########################################################################################
set TCL_PLACEMENT_SPACING_LABEL_RULE_FILE "" ;# A file to specify your placement spacing labels and rules.
					;# Example : set_placement_spacing_label -name X -side both -lib_cells [get_lib_cells -of [get_cells]]
					;# Example : set_placement_spacing_rule -labels {X SNPS_BOUNDARY} {0 1}

set SAIF_FILE				"" ;# Specify a SAIF file for accurate power computation for features such as
					;# total power (opt.power.mode set to total) and enhanced low power placement (place.coarse.enhanced_low_power_effort).
					;# sourced at the beginning of place_opt.tcl
set SAIF_FILE_POWER_SCENARIO		"" ;# SAIF_FILE related; specify a power scenario where the SAIF is to be applied
set SAIF_FILE_SOURCE_INSTANCE		"" ;# SAIF_FILE related; name of the instance of the current design as it appears in SAIF file.
set SAIF_FILE_TARGET_INSTANCE		"" ;# SAIF_FILE related; name of the target instance on which activity is to be annotated.
set OPTIMIZATION_FREEZE_PORT_LIST 	"" ;# List of cells (for ex, clock gen modules, or customized logics that should not be touched) to which freeze_clock_ports 
					;# and freeze_data_ports attribute will be set to prevent optimization from modifying their port signature; 
					;# especially useful if you do formal verification by modules. 
					;# Sets opt.dft.hier_preservation to true and runs set_freeze_port -all on the specified cells.
set TCL_USER_CONNECT_PG_NET_SCRIPT ""	;# An optional Tcl file for customized connect_pg_net command and options, such as for bias pins of cells added by opto;
					;# sourced by all the main scripts prior to the save_block command

# ---------------------------------
# Lib cell purpose restrictions
# ---------------------------------
set TCL_LIB_CELL_PURPOSE_FILE 		"set_lib_cell_purpose.tcl" ;# A Tcl file which applies lib cell purpose related restrictions;
					;# You can specify it with your own customized script	
					;# RM default is set_lib_cell_purpose.tcl which includes the following restrictions, each controlled by
					;# an individual variable : dont use cells (TCL_LIB_CELL_DONT_USE_FILE), tie cells (TIE_LIB_CELL_PATTERN_LIST), 
					;# hold fixing (HOLD_FIX_LIB_CELL_PATTERN_LIST), CTS (CTS_LIB_CELL_PATTERN_LIST) and CTS-exclusive cells (CTS_ONLY_LIB_CELL_PATTERN_LIST). 

## The following 5 *_LIB_CELL_* variables are only applicable if set_lib_cell_purpose.tcl is used for lib cell purpose restrictions.
#  If you do not plan to use set_lib_cell_purpose.tcl, specify TCL_LIB_CELL_PURPOSE_FILE with your own file and you don't have to specify the following variables.
set TCL_LIB_CELL_DONT_USE_FILE 		"" ;# A Tcl file for customized don't use ("set_lib_cell_purpose -exclude <purpose>" commands).
					;# The file is to be sourced in set_lib_cell_purpose.tcl, which is the default script for handling lib cell 
					;# purpose restrictions specified by the variable TCL_LIB_CELL_PURPOSE_FILE above.
					;# It only takes effect if TCL_LIB_CELL_PURPOSE_FILE is set to the default value set_lib_cell_purpose.tcl
set TIE_LIB_CELL_PATTERN_LIST 		"" ;# A list of TIE lib cell patterns to be included for optimization;
					;# Example : set TIE_LIB_CELL_PATTERN_LIST "*/TIE* */ttt*"
set HOLD_FIX_LIB_CELL_PATTERN_LIST 	"" ;# A list of hold time fixing lib cell patterns to be included only for hold
set CTS_LIB_CELL_PATTERN_LIST 		"" ;# List of CTS lib cell patterns to be used by CTS; 
					;# please include repeaters, always-on repeaters (for MV-CTS), 
					;# and gates (for sizing pre-existing gates)/always-on buffers;
					;# Please also include flops as CCD can size flops to improve timing.
				   	;# example : set CTS_LIB_CELL_PATTERN_LIST "*/NBUF* */AOBUF* */AOINV* */SDFF*"
set CTS_ONLY_LIB_CELL_PATTERN_LIST 	"" ;# List of CTS lib cell patterns to be used by CTS "exclusively", such as clock specific
					;# buffers and inverters. Please be aware that these cells will be applied with only cts 
					;# purpose and nothing else. If you want to use these lib cells for other purposes, 
					;# such as optimization and hold, specify them in CTS_LIB_CELL_PATTERN_LIST instead

# ---------------------------------
# Clock NDR
# ---------------------------------
set TCL_CTS_NDR_RULE_FILE 		"cts_ndr.tcl" ;# Specify a script for clock NDR creation and association, to be sourced at place_opt
					;# By default the variable is set to cts_ndr.tcl, which is an RM provided example.
					;# Important: to use the example script, you must also specify CTS_NDR_RULE_NAME, CTS_INTERNAL_NDR_RULE_NAME,
					;# or CTS_LEAF_NDR_RULE_NAME (see below for details), otherwise the script won't do anything.

## Note: the CTS_*NDR* variables below are only applicable if TCL_CTS_NDR_RULE_FILE is set to the RM provided example script. 
## If you specify your own script for TCL_CTS_NDR_RULE_FILE, variables below will not be used.
## For root clock nets
set CTS_NDR_RULE_NAME			"" ;# Specify a clock NDR rule for root nets;
					;# required for the example script to work on the root and internal nets.
					;# Below are the 3 predefined rules supported:  
					;# rm_2w2s : double width double spacing 
					;# rm_2w2s_shield_default : double width double spacing + shielding with default width and spacing
					;# rm_2w2s_shield_list : double width double spacing + shielding with customized per layer width and spacing
set CTS_NDR_SHIELDING_LAYER_WIDTH_LIST 	"" ;# A list of layer_name shield_width ,for ex, "M1 0.1 M2 0.1 M3 0.1";
					;# required if you specify rm_2w2s_shield_list as CTS_NDR_RULE_NAME.
set CTS_NDR_SHIELDING_LAYER_SPACING_LIST "" ;# A list of layer_name shield_spacing, for ex, "M1 0.1 M2 0.1 M3 0.1";
					;# required if you specify rm_2w2s_shield_list as CTS_NDR_RULE_NAME.
set CTS_NDR_MIN_ROUTING_LAYER		"" ;# Min routing layer for set_clock_routing_rules to which CTS_NDR_RULE_NAME is applied. 
set CTS_NDR_MAX_ROUTING_LAYER		"" ;# Max routing layer for set_clock_routing_rules to which CTS_NDR_RULE_NAME is applied.

## For internal clock nets (by default same values as with the root clock nets)
set CTS_INTERNAL_NDR_RULE_NAME		"$CTS_NDR_RULE_NAME" ;# Specify a clock NDR rule for internal nets; default is same as CTS_NDR_RULE_NAME;
					;# required for the example script to work on the internal nets.
					;# Below are the 3 predefined rules supported:  
					;# rm_2w2s : double width double spacing 
					;# rm_2w2s_shield_default : double width double spacing + shielding with default width and spacing
					;# rm_2w2s_shield_list : double width double spacing + shielding with customized per layer width and spacing
set CTS_INTERNAL_NDR_SHIELDING_LAYER_WIDTH_LIST "$CTS_NDR_SHIELDING_LAYER_WIDTH_LIST" ;# A list of layer_name shield_width ,for ex, "M1 0.1 M2 0.1 M3 0.1";
					;# required if you specify rm_2w2s_shield_list as CTS_INTERNAL_NDR_RULE_NAME.
set CTS_INTERNAL_NDR_SHIELDING_LAYER_SPACING_LIST "$CTS_NDR_SHIELDING_LAYER_SPACING_LIST" ;# A list of layer_name shield_spacing, for ex, "M1 0.1 M2 0.1 M3 0.1";
					;# required if you specify rm_2w2s_shield_list as CTS_INTERNAL_NDR_RULE_NAME.
set CTS_INTERNAL_NDR_MIN_ROUTING_LAYER "$CTS_NDR_MIN_ROUTING_LAYER" ;# Min routing layer for set_clock_routing_rules to which CTS_INTERNAL_NDR_RULE_NAME is applied. 
set CTS_INTERNAL_NDR_MAX_ROUTING_LAYER "$CTS_NDR_MAX_ROUTING_LAYER" ;# Max routing layer for set_clock_routing_rules to which CTS_INTERNAL_NDR_RULE_NAME is applied.

## For leaf clock nets
set CTS_LEAF_NDR_RULE_NAME 		"" ;# Specify rm_leaf as the predefined rule for the example script to prepare a default rule for leaf nets
set CTS_LEAF_NDR_MIN_ROUTING_LAYER 	$CTS_NDR_MIN_ROUTING_LAYER ;# Min routing layer for set_clock_routing_rules to which rm_leaf is applied.
set CTS_LEAF_NDR_MAX_ROUTING_LAYER 	$CTS_NDR_MAX_ROUTING_LAYER ;# Max routing layer for set_clock_routing_rules to which rm_leaf is applied.

# ---------------------------------
# Preroute optimizations
# ---------------------------------
set PREROUTE_PLACEMENT_MAX_DENSITY	"" ;# specify a float value between 0 and 1; tool default unspecified; optional in RM;	
					;# If specified, sets place.coarse.max_density to limit local density to be less than the value.
					;# if unspecified, place.coarse.max_density remains at tool default 0; 
					;# now if $PREROUTE_PLACEMENT_AUTO_DENSITY is also true, tool will auto determine a appropriate value; 
					;# while if $PREROUTE_PLACEMENT_AUTO_DENSITY is false, tool will try to spread cells evenly
set PREROUTE_PLACEMENT_MAX_UTIL		"" ;# specify a float value between 0 and 1; tool default unspecified; optional in RM;
					;# sets place.coarse.congestion_driven_max_util to control how densely the tool can pack cells in uncongested 
					;# regions, in order to remove congestion in congested regions
					;# if unspecified, place.coarse.congestion_driven_max_util remains at tool default 0.93
set PREROUTE_PLACEMENT_AUTO_DENSITY	true ;# true|false; tool default true; optional in RM to set it to false if you want to disable the feature; 
					;# sets place.coarse.auto_density_control to control coarse placement automatic density control;
					;# if you do not specify either of the above two settings (max density and max util) and keep the tool defaults, 
					;# the automatic density control selects the value for max density and max util based on the design stage;
					;# message PLACE-027 is issued to report the chosen settings
set PREROUTE_PLACEMENT_ENHANCED_AUTO_DENSITY false ;# false|true, tool default false; optional in RM;
					;# sets place.coarse.enhanced_auto_density_control;
					;# automaticlly selects max density based on the design stage as well as design utilization;
					;# automatically selects max util based on the design stage as well as design tchnology

set PREROUTE_PLACEMENT_TARGET_ROUTING_DENSITY "" ;# specify a float value between 0 and 1; tool default unspecified; optional in RM;	
					;# sets place.coarse.target_routing_density to control target routing density for congestion-driven placement; 
					;# if left unspecified, place.coarse.target_routing_density remains at tool default 0 
set PREROUTE_PLACEMENT_PIN_DENSITY_AWARE false ;# false|true; tool default false; optional in RM;
					;# sets app option place.coarse.pin_density_aware to control maximum local pin density;
set PREROUTE_NDR_OPTIMIZATION 		false ;# false|true, tool default false; optional in RM;
					;# sets place_opt/clock_opt.flow.optimize_ndrs to true enables NDR optimization
set PREROUTE_CTS_POWER_AWARE_PRUNING	false ;# false|true; tool default false; RM default false;
					;# sets cts.common.power_aware_pruning to allow selection of repeater cells to also consider 
					;# internal and leakage power in order to reduce dynamic and also leakage power of the clock trees;
					;# impacts place_opt trial CTS/optimize icgs and clock_opt build_clock phase 
set PREROUTE_CTS_LOW_POWER_TECHNIQUE	"" ;# gate_relocation|low_power_targets|all; RM default is unspecified;
					;# impacts place_opt trial CTS/optimize icgs and clock_opt build_clock phase; 
					;# gate_relocation: sets cts.compile.power_opt_mode to gate_relocation to enable activity aware gate 
					;#                  relocation (moves cells with low input clock toggling rates closer to their drivers)
					;#		    at the end of gate by gate clock tree synthesis;
					;# low_power_targets: sets cts.compile.power_opt_mode to low_power_targets for CTS to relax certain
					;#                    internal constraints and build clock trees with less area and power;
  					;# all: sets cts.compile.power_opt_mode to all to enable both the above features

########################################################################################## 
## Variables for the place_opt step (used by place_opt.tcl and settings.place_opt.tcl)
##########################################################################################
set PLACE_OPT_ACTIVE_SCENARIO_LIST	"" ;# A subset of scenarios to be made active during place_opt step;
					;# once set, the list of active scenarios is saved and carried over to subsequent steps;
					;# include CTS scenarios if you are enabling CTS related features during place_opt,
					;# such as PLACE_OPT_OPTIMIZE_ICGS, PLACE_OPT_TRIAL_CTS, or PLACE_OPT_MSCTS
set PLACE_OPT_USER_INSTANCE_NAME_PREFIX "" ;# Specify the prefix for new cells created by place_opt; default "" which means no user prefix
set TCL_USER_PLACE_OPT_PRE_SCRIPT 	"" ;# An optional Tcl file for place_opt.tcl to be sourced before place_opt.
set TCL_USER_PLACE_OPT_SCRIPT 		"" ;# An optional Tcl file for place_opt.tcl to replace pre-existing place_opt commands.
set TCL_USER_PLACE_OPT_POST_SCRIPT 	"" ;# An optional Tcl file for place_opt.tcl to be sourced after place_opt.
set PLACE_OPT_SPG_FLOW 			false ;# false|true; RM default false; set it to true to enable SPG input handling flow in place_opt.tcl;
					;# which skips the first pass of the two-pass placement;
					;# recommended to go with DC-ASCII inputs (set INIT_DESIGN_INPUT DC_ASCII)
set PLACE_OPT_TRIAL_CTS 		false ;# false|true; tool default false; optional in RM;
					;# sets place_opt.flow.trial_clock_tree to enables early clock tree synthesis;
					;# useful for low power placement and ICG optimization flow (PLACE_OPT_OPTIMIZE_ICGS). 
					;# Propagated clocks will be used through-out place_opt flow.
					;# Note: when PLACE_OPT_OPTIMIZE_ICGS is set to true, trial CTS will be automatically enabled, 
					;# regardless of the setting of PLACE_OPT_TRIAL_CTS. So you don't have to manually enable it.
set PLACE_OPT_OPTIMIZE_ICGS 		false ;# false|true; tool default false; optional in RM;
					;# sets place_opt.flow.optimize_icgs for place_opt to run automatic ICG optimization that performs trial CTS, 
					;# timing-aware ICG splitting and clock-aware placement for critical enable paths.
					;# The aggressiveness of splitting can be controlled by the PLACE_OPT_OPTIMIZE_ICGS_CRITICAL_RANGE. 
set PLACE_OPT_OPTIMIZE_ICGS_CRITICAL_RANGE "" ;# specify a value between 0 and 1; default unspecified; 
					;# sets place_opt.flow.optimize_icgs_critical_range to the value specified; tool default is 0.75.
					;# When set to X, only ICGs enable slack within {EN_WNS, EN_WNS*(1-X)} will be considered for splitting;
					;# for example, 0.75 means only ICG with enable pin violations between 1*EN_WNS and 0.25*EN_WNS will be split,
					;# while the ICG enable slack below 0.25*EN_WNS will be skipped. Larger value means more splitting. 
set PLACE_OPT_MERGE_ICGS		true ;# false|true; tool default true; optional in RM to set it to false;
					;# sets place_opt.flow.merge_clock_gates to control whether the OBD ICG merging is enabled or not;
					;# when set to true, ICG merging (merge_clock_gates) runs internally inside place_opt as a first step in initial_place stage;
          				
set PLACE_OPT_ICG_AUTO_BOUND		false ;# false|true; tool default false; optional in RM;
					;# sets place.coarse.icg_auto_bound to enable use of automatically created group bounds
set PLACE_OPT_CLOCK_AWARE_PLACEMENT	false ;# false|true; tool default false; optional in RM;
					;# sets place_opt.flow.clock_aware_placement to guide placement with ICG's enable timing criticality; 
					;# place_opt will try to improve ICG enable timing by placing the timing critical ICGs and their fanout cells 
					;# at better locations for ICG enable paths.
					;# Note: when PLACE_OPT_OPTIMIZE_ICGS is set to true, clock-aware placement will be automatically enabled, 
					;# regardless of the setting of PLACE_OPT_CLOCK_AWARE_PLACEMENT. So you don't have to manually enable it.
set PLACE_OPT_MSCTS			false ;# false|true; enables MSCTS (regular) at place_opt step; requires TCL_REGULAR_MSCTS_FILE to be specified;
					;# It runs in two parts: first part runs at place_opt step to source TCL_REGULAR_MSCTS_FILE;
					;# second part runs at clock_opt_cts step, skips TCL_REGULAR_MSCTS_FILE, propagates clocks, and runs mesh simulation;
					;# By default, the features runs in ideal clock mode. However if if PLACE_OPT_OPTIMIZE_ICGS or PLACE_OPT_TRIAL_CTS 
					;# are also enabled, then propagated clocks will be used during the place_opt step;
					;# If set to false (RM default), RM runs MSCTS only at clock_opt_cts step.
set PLACE_OPT_MSCTS_CRITICAL_SCENARIO	"" ;# Specify a scenario with worst RC and most visible sinks for place_opt MSCTS to base on;
					;# script will record current scenario, switch to the specified scenario before MSCTS, and then
					;# restore the original current scenario after MSCTS. Only valid if PLACE_OPT_MSCTS is set to true

set TCL_USER_SPARE_CELL_PRE_SCRIPT	"" ;# An optional Tcl file for spare cell insertion to be sourced before place_opt;
					   ;# refer to templates/place_opt.spare_cell.tcl for an example
set TCL_USER_SPARE_CELL_POST_SCRIPT	"" ;# An optional Tcl file for spare cell insertion to be sourced after place_opt;
					   ;# refer to templates/place_opt.spare_cell.tcl for an example
set TCL_NON_CLOCK_NDR_RULES_FILE 	"" ;# Specify a NDR rules file for signal nets (Clock NDR rules are specified by CTS_NDR_* variables above)

set PLACE_OPT_MULTIBIT_BANKING 		false ;# tool default false; optional in RM;
					;# sets place_opt.flow.enable_multibit_banking to enable multibit banking during place_opt;
					;# takes effect during place_opt initial_opto 
set PLACE_OPT_MULTIBIT_DEBANKING 	false ;# tool default false; optional in RM;
					;# sets place_opt.flow.enable_multibit_debanking to enables multibit debanking during place_opt;
					;# takes effect during place_opt final_opto

########################################################################################## 
## Variables for the clock_opt step 
## (used by settings.clock_opt_cts.tcl, clock_opt_cts.tcl, and clock_opt_opto.tcl)
##########################################################################################
set CLOCK_OPT_CTS_ACTIVE_SCENARIO_LIST  "" ;# A subset of scenarios to be made active during clock_opt_cts step;
					;# once set, the list of active scenarios is saved and carried over to subsequent steps;
set CLOCK_OPT_CTS_USER_INSTANCE_NAME_PREFIX "" ;# Specify the prefix for new cells created by clock_opt build_clock; default "" which means no user prefix
set TCL_USER_CLOCK_OPT_CTS_PRE_SCRIPT 	"" ;# An optional Tcl file for clock_opt_cts.tcl to be sourced before clock_opt.
set TCL_USER_CLOCK_OPT_CTS_SCRIPT 	"" ;# An optional Tcl file for clock_opt_cts.tcl to replace pre-existing clock_opt commands.
set TCL_USER_CLOCK_OPT_CTS_POST_SCRIPT 	"" ;# An optional Tcl file for clock_opt_cts.tcl to be sourced after clock_opt.

set CLOCK_OPT_OPTO_ACTIVE_SCENARIO_LIST "" ;# A subset of scenarios to be made active during clock_opt_opto step;
					;# once set, the list of active scenarios is saved and carried over to subsequent steps;
set CLOCK_OPT_OPTO_USER_INSTANCE_NAME_PREFIX "" ;# Specify the prefix for new cells created by clock_opt final_opto; default "" which means no user prefix
set TCL_USER_CLOCK_OPT_OPTO_PRE_SCRIPT 	"" ;# An optional Tcl file for clock_opt_opto.tcl to be sourced before clock_opt.
set TCL_USER_CLOCK_OPT_OPTO_SCRIPT 	"" ;# An optional Tcl file for clock_opt_opto.tcl to replace pre-existing clock_opt commands.
set TCL_USER_CLOCK_OPT_OPTO_POST_SCRIPT "" ;# An optional Tcl file for clock_opt_opto.tcl to be sourced after clock_opt.

set CLOCK_OPT_MSCTS_CRITICAL_SCENARIO	"" ;# Specify a scenario with worst RC and most visible sinks for MSCTS to base on;
					;# script will record current scenario, switch to the specified scenario before MSCTS, and then
					;# restore the original current scenario after MSCTS.
set TCL_REGULAR_MSCTS_FILE		"" ;# Specify a Tcl script for regular multisource clock tree synthesis setup and creation,
					;# which will be sourced prior to the "place_opt" if PLACE_OPT_MSCTS is true in place_opt.tcl
					;# and before "clock_opt -from build_clock -to route_clock" command in clock_opt_cts.tcl
					;# RM provided script: mscts.regular.tcl
set TCL_STRUCTURAL_MSCTS_FILE		"" ;# Specify a Tcl script for structural multisource clock tree synthesis setup and creation,
					;# which will be sourced prior to the "clock_opt -from build_clock -to route_clock" command
					;# in clock_opt_cts.tcl;
					;# RM provided script: mscts.structural.tcl

set PREROUTE_CTS_POWER_AWARE_PRUNING	false ;# false|true; tool default false; RM default false;
					;# sets cts.common.power_aware_pruning to allow selection of repeater cells to also consider 
					;# internal and leakage power in order to reduce dynamic and also leakage power of the clock trees 
set PREROUTE_CTS_LOW_POWER_TECHNIQUE	"" ;# gate_relocation|low_power_targets|all; RM default is unspecified;
					;# gate_relocation: sets cts.compile.power_opt_mode to gate_relocation to enable activity aware gate 
					;#                  relocation (moves cells with low input clock toggling rates closer to their drivers)
					;#		    at the end of gate by gate clock tree synthesis;
					;# low_power_targets: sets cts.compile.power_opt_mode to low_power_targets for CTS to relax certain
					;#                    internal constraints and build clock trees with less area and power;
  					;# all: sets cts.compile.power_opt_mode to all to enable both the above features
set CLOCK_OPT_OPTO_CTO 			false ;# Default false; enables post-route clock tree optimization in clock_opt_opto.tcl
set CLOCK_OPT_OPTO_CTO_USER_INSTANCE_NAME_PREFIX "" ;# Specify the prefix for new cells created by CTO; default "" which means no user prefix

########################################################################################## 
## Variables for route_auto and route_opt related settings 
## (Used by settings.route_auto.tcl, settings.route_opt.tcl, route_auto.tcl, and route_opt.tcl)
##########################################################################################
set ROUTE_AUTO_ACTIVE_SCENARIO_LIST 	"" ;# A subset of scenarios to be made active during route_auto step;
					;# once set, the list of active scenarios is saved and carried over to subsequent steps;
set ROUTE_AUTO_USER_INSTANCE_NAME_PREFIX "" ;# Specify the prefix for new cells created suring route_auto; default "" which means no user prefix
set TCL_USER_ROUTE_AUTO_PRE_SCRIPT 	"" ;# An optional Tcl file for route_auto.tcl to be sourced before route_auto.
set TCL_USER_ROUTE_AUTO_SCRIPT 		"" ;# An optional Tcl file for route_auto.tcl to replace pre-existing routing commands.
set TCL_USER_ROUTE_AUTO_POST_SCRIPT 	"" ;# An optional Tcl file for route_auto.tcl to be sourced after route_auto.

set ROUTE_OPT_ACTIVE_SCENARIO_LIST 	"" ;# A subset of scenarios to be made active during route_opt step;
					;# once set, the list of active scenarios is saved and carried over to subsequent steps;
set ROUTE_OPT_USER_INSTANCE_NAME_PREFIX "" ;# Specify the prefix for new cells created during route_opt; default "" which means no user prefix
set TCL_USER_ROUTE_OPT_PRE_SCRIPT 	"" ;# An optional Tcl file for route_opt.tcl to be sourced before route_opt.
set TCL_USER_ROUTE_OPT_SCRIPT 		"" ;# An optional Tcl file for route_opt.tcl to replace pre-existing route_opt commands.
set TCL_USER_ROUTE_OPT_POST_SCRIPT 	"" ;# An optional Tcl file for route_opt.tcl to be sourced after route_opt.
set CLOCK_OPT_GLOBAL_ROUTE_OPT		false ;# false|true; tool default false; optional in RM; 
					;# enables Global Route Based Optimization by setting clock_opt.flow.enable_global_route_opt 
					;# and route_opt.flow.enable_power to true, sources routing settings, and runs clock_opt -from global_route_opt;
					;# this feature is added to route_auto.tcl; if enabled, it replaces route_global command;
set ROUTE_AUTO_USE_SINGLE_COMMAND	false ;# false|true; runs route_auto command instead of atomic commands (route_global+route_track+route_detail with update_timing in between)
set REDUNDANT_VIA_INSERTION		false ;# false|true; tool default false; optional in RM; enables redundant via insertion for post-route;
					;# if you choose ESTABLISHED for TECHNOLOGY_NODE on RMgen download page,
					;# RM is set up to run concurrent redundant via insertion during route_auto and route_opt
					;# otherwise, RM is set up to reserve space and run standalone add_redundant_vias after route_auto and route_opt  
set TCL_USER_REDUNDANT_VIA_MAPPING_FILE "" ;# ICC-II via mapping file required for redundant via insertion; 
					;# the file should include add_via_mapping commands.   
set TCL_USER_ICC_REDUNDANT_VIA_MAPPING_FILE "" ;# ICC style via mapping file required for redundant via insertion; 
					;# the file should include define_zrt_redundant_vias commands.
					;# This variable is mutually exclusive with TCL_USER_REDUNDANT_VIA_MAPPING_FILE
set ROUTE_AUTO_ANTENNA_FIXING		false ;# false|true; tool default false; optional in RM;
					;# set true to enable route.detail.hop_layers_to_fix_antenna and source TCL_ANTENNA_RULE_FILE in route_auto.tcl 
					;# to fix Antenna violations.
set TCL_ANTENNA_RULE_FILE	""	;# Antenna rule file; required if ROUTE_AUTO_ANTENNA_FIXING is set to true.
set ROUTE_AUTO_CREATE_SHIELDS 		"none" ;# none|before_route_auto|after_route_auto; default is none; optional in RM;
					;# choose to create shields before or after route_auto; all nets with shielding rules will be shielded	

set ROUTE_OPT_PT_DELAY_CALCULATION_WITH_PBA false ;# Default false; sets time.pba_optimization_mode to path to enable PBA during second route_opt;
set ROUTE_OPT_STARRC_CONFIG_FILE ""	;# Specify the configuration file for StarRC in-design extraction for the second route_opt in route_opt.tcl;
					;# required; refer to templates/route_opt.starrc_config_example.txt as an example
set ROUTE_OPT_RESHIELD 			"after_route_opt" ;# none|after_route_opt|incremental; default is after_route_opt; 
					;# set after_route_opt to reshield nets after route_opt is done with create_shield command; 
					;# set incremental to trigger reshield during all route_opt eco route sessions with an app option; 
					;# note that ROUTE_OPT_RESHIELD only works if ROUTE_AUTO_CREATE_SHIELDS is set to a value other than none
set ROUTE_OPT_CTO 			"auto" ;# auto|always_on|always_off; tool default auto; RM default auto;
					;# sets route_opt.flow.enable_ccd_clock_drc_fixing to the specified value for clock DRC fixing in route_opt;
					;# Note: this feature affects both CCD and non-CCD route_opt;
					;# if CCD is enabled, with auto, route_opt will enable the feature; set it to always_off if you want it disabled.
					;# if CCD is not enabled, with auto, this feature won't be enabled; set it to always_on to enable the feature.

## The following 6 ROUTE_OPT_ECO_OPT* variables are for ECO fusion (eco_opt command) in route_opt.tcl
#  Note that once ROUTE_OPT_ECO_OPT_PT_PATH is specified, ECO fusion is enabled and the third route_opt will be skipped.
set ROUTE_OPT_ECO_OPT_PT_PATH		"" ;# Required by eco_opt; specify the path to pt_shell; for example: /u/mgr/bin/pt_shell
					;# if specified, eco_opt
set ROUTE_OPT_ECO_OPT_DB_PATH		"" ;# Optional; specify the paths to .db files of the reference libraries for PT (if not already in your search path)
					;# For eco_opt, PT needs to read db. 
set ROUTE_OPT_ECO_OPT_TYPE		"" ;# Optional; eco_opt fixing type; timing|setup|hold|drc|leakage_power|dynamic_power|total_power|buffer_removal
					;# if not specified, works on all types
set ROUTE_OPT_ECO_OPT_STARRC_CONFIG_FILE "" ;# Optional; specify the configuration file for StarRC in-design extraction
set ROUTE_OPT_ECO_OPT_WORK_DIR		"" ;# Optional; specify the working directory for eco_opt where PT files and logs are generated;
					;# if not specified, tool will automatically generate one
set ROUTE_OPT_ECO_OPT_PRE_LINK_SCRIPT	"" ;# Optional; specify the file that contains custom PT script, which is executed before linking in PrimeTime;
					;# use PT commands that do not require the current design
set ROUTE_OPT_ECO_OPT_POST_LINK_SCRIPT	"" ;# Optional; specify the file that contains custom PT script, which is executed after linking in PrimeTime;
					;# use PT commands that require the current design

########################################################################################## 
## Variables for chip finishing related settings (Used by chip_finish.tcl)
##########################################################################################
set CHIP_FINISH_ACTIVE_SCENARIO_LIST 	"" ;# A subset of scenarios to be made active during chip_finish step.
					   ;# once set, the list of active scenarios is saved and carried over to subsequent steps.
set TCL_USER_CHIP_FINISH_PRE_SCRIPT 	"" ;# An optional Tcl file for chip_finish.tcl to be sourced before filler cell insertion.
set TCL_USER_CHIP_FINISH_POST_SCRIPT 	"" ;# An optional Tcl file for chip_finish.tcl to be sourced after metal fill insertion.

## Std cell filler and decap cells used by chip_finish step and post PT-ECO refill in pt_eco step
set CHIP_FINISH_METAL_FILLER_PREFIX 	"" ;# A string to specify the prefix for metal filler (decap) cells.
set CHIP_FINISH_NON_METAL_FILLER_PREFIX $CHIP_FINISH_METAL_FILLER_PREFIX ;# A string to specify the prefix for non-metal fillers.

set CHIP_FINISH_METAL_FILLER_LIB_CELL_LIST "" ;# A list of metal filler (decap) lib cells, including the library name, for ex, 
					   ;# Example: "hvt/DCAP_HVT lvt/DCAP_LVT". Recommended to specify decaps from largest to smallest.
set CHIP_FINISH_NON_METAL_FILLER_LIB_CELL_LIST "" ;# A list of non-metal filler lib cells, including the library name, for ex,
					   ;# Example: hvt/FILL_HVT lvt/FILL_LVT. Recommended to specify them from largest to smallest.

## Signal EM
set CHIP_FINISH_SIGNAL_EM_CONSTRAINT_FORMAT "ITF" ;# Specify signal EM constraint format: ITF | ALF; string is uppercase and ITF is default
set CHIP_FINISH_SIGNAL_EM_CONSTRAINT_FILE "" ;# A constraint file which contains signal electromigration constraints;
					   ;# specify an ITF file if CHIP_FINISH_SIGNAL_EM_CONSTRAINT_FORMAT is set to ITF, and specify an
					   ;# ALF file if CHIP_FINISH_SIGNAL_EM_CONSTRAINT_FORMAT is set to ALF;
					   ;# required for signal EM analysis and fixing to be enabled
set CHIP_FINISH_SIGNAL_EM_SAIF 		"" ;# An optional SAIF file for the signal EM analysis.
set CHIP_FINISH_SIGNAL_EM_SCENARIO 	"" ;# Specify an active scenario which is enabled for setup and hold analysis;
					   ;# Required for signal EM analysis and fixing to proceed.
set CHIP_FINISH_SIGNAL_EM_FIXING 	false ;# Enable signal EM fixing; false | true; false is default

########################################################################################## 
## Variables for ICV in-design related settings (used by icv_in_design.tcl)
##########################################################################################
set ICV_IN_DESIGN_ACTIVE_SCENARIO_LIST 	"" ;# A subset of scenarios to be made active during icv_in_design step;
					   ;# once set, the list of active scenarios is saved and carried over to subsequent steps;
set TCL_USER_ICV_IN_DESIGN_PRE_SCRIPT 	"" ;# An optional Tcl file for chip_finish.tcl to be sourced before signoff_check_drc.
set TCL_USER_ICV_IN_DESIGN_POST_SCRIPT 	"" ;# An optional Tcl file for chip_finish.tcl to be sourced after second signoff_check_drc.

## signoff_check_drc specific variables
set ICV_IN_DESIGN_DRC_CHECK_RUNSET 	"" ;# The foundry runset for ICV used by signoff_check_drc
set ICV_IN_DESIGN_DRC_CHECK_RUNDIR 	"z_check_drc" 
					   ;# The working directory for the signoff_check_drc before signoff_fix_drc;
					   ;# The directory that contains the initial DRC error database for signoff_fix_drc.

## singoff_fix_drc specific variables
set ICV_IN_DESIGN_ADR 			true ;# true|false; true enables signoff_fix_drc in addition to signoff_check_drc; default is true
set ICV_IN_DESIGN_ADR_RUNDIR 		"z_adr"	;# The working directory for signoff_fix_drc; only takes effect if ICV_IN_DESIGN_ADR is true
set ICV_IN_DESIGN_POST_ADR_RUNDIR 	"z_post_adr" ;# The working directory for signoff_check_drc after signoff_fix_drc is done; 
					   ;# only takes effect if ICV_IN_DESIGN_ADR is true 

set ICV_IN_DESIGN_ADR_DPT_RULES 	"" ;# Specify your DPT rules for signoff_fix_drc fixing; only takes effect if ICV_IN_DESIGN_ADR is true
set ICV_IN_DESIGN_ADR_DPT_RUNDIR	"z_adr_with_dpt" ;# The working directory for signoff_check_drc with DPT rule fixing;
					   ;# only takes effect if ICV_IN_DESIGN_ADR_DPT_RULES (DPR rules) is specified
set ICV_IN_DESIGN_POST_ADR_DPT_RUNDIR	"z_post_adr_with_dpt" ;# The working directory for signoff_check_drc after DPT rule fixing is done;
					   ;# only takes effect if ICV_IN_DESIGN_ADR_DPT_RULES (DPR rules) is specified

## Metal fill specific variables
set ICV_IN_DESIGN_METAL_FILL 		false ;# Default false; set it to true to enable the metal fill creation feature.
set ICV_IN_DESIGN_METAL_FILL_RUNDIR	"z_icvFill" ;# The working directory for signoff_create_metal_fill. Optional. Default is z_icvFill.
set ICV_IN_DESIGN_METAL_FILL_TIMING_DRIVEN_THRESHOLD "" 
					   ;# Specify the threshold for timing-driven metal fill.
					   ;# If not specified, timing-driven is not enabled.
					   ;# If specified, "-timing_preserve_setup_slack_threshold" option is added.
set ICV_IN_DESIGN_METAL_FILL_TRACK_BASED "off" ;# off | <a technology node> | generic; used for -track_fill option of signoff_create_metal_fill
					   ;# for non-track-based : specify off 
					   ;# for track-based : specify either a node (refer to man page) or generic 
set ICV_IN_DESIGN_METAL_FILL_RUNSET	"" ;# Specify the foundry runset for signoff_create_metal_fill command;
					   ;# required only by non track-based metal fill (ICV_IN_DESIGN_METAL_FILL_TRACK_BASED set to off).
set ICV_IN_DESIGN_POST_METAL_FILL_RUNDIR "z_MFILL_after" 
					   ;# The working directory for the signoff_check_drc after signoff_create_metal_fill is completed;
					   ;# only takes effect if ICV_IN_DESIGN_METAL_FILL is true
set ICV_IN_DESIGN_METAL_FILL_TRACK_BASED_PARAMETER_FILE "auto" ;# auto | <a parameter file>; default is auto;
					   ;# this variable is only for track-based metal fill;
					   ;# specify auto to use ICC-II auto generated track_fill_params.rh file or your own paramter file.

########################################################################################## 
## Variables for settings related to write data (used by write_data.tcl)
##########################################################################################
## write_gds related
set WRITE_GDS_LAYER_MAP_FILE 		"" ;# A layer map file which provides a mapping between the tool and GDS layers
set WRITE_OASIS_LAYER_MAP_FILE 		"" ;# A layer map file which provides a mapping between the tool and OASIS layers

########################################################################################## 
## Variables for Functional ECO related settings (used by functional_eco.tcl)
##########################################################################################
set FUNCTIONAL_ECO_ACTIVE_SCENARIO_LIST	"" ;# Optional; a subset of scenarios to be made active during the step;
					   ;# once set, the list of active scenarios is saved and carried over to subsequent steps;
set TCL_USER_FUNCTIONAL_ECO_PRE_SCRIPT	"" ;# An optional Tcl file to be sourced before ECO operations.
set TCL_USER_FUNCTIONAL_ECO_POST_SCRIPT	"" ;# An optional Tcl file to be sourced after route_eco.
set FUNCTIONAL_ECO_DISPLACEMENT_THRESHOLD "10" ;# A float to specify the maximum displacement threshold value for 
					   ;# place_eco_cells -eco_changed_cells -legalize_mode minimum_physical_impact -displacement_threshold;
set FUNCTIONAL_ECO_VERILOG_FILE		"" ;# Required; a verilog file to be 
set FUNCTIONAL_ECO_MODE			"default" ;# Specify the preferred flow; default|freeze_silicon
					   ;# default: sources $FUNCTIONAL_ECO_CHANGE_FILE and place_eco_cells in MPI mode
					   ;# freeze_silicon: add_spare_cells, place_eco_cells, sources $FUNCTIONAL_ECO_CHANGE_FILE, and place_freeze_silicon

########################################################################################## 
## Variables for PT ECO related settings (used by pt_eco.tcl/pt_eco_incremental.tcl)
##########################################################################################
## The following variables apply to both pt_eco.tcl (classic PT-ECO flow) and pt_eco_incremental.tcl (Galaxy incremental ECO flow)
set PT_ECO_ACTIVE_SCENARIO_LIST 	"" ;# Optional; a subset of scenarios to be made active during the step;
					   ;# once set, the list of active scenarios is saved and carried over to subsequent steps;
set TCL_USER_PT_ECO_PRE_SCRIPT 		"" ;# An optional Tcl file to be sourced before ECO operations.
set TCL_USER_PT_ECO_POST_SCRIPT 	"" ;# An optional Tcl file to be sourced after route_eco.
set PT_ECO_DISPLACEMENT_THRESHOLD 	"10" ;# A float to specify the maximum displacement threshold value for 
					   ;# place_eco_cells -eco_changed_cells -legalize_mode minimum_physical_impact -displacement_threshold;

## The following variables only apply to pt_eco.tcl (classic PT-ECO flow)
set PT_ECO_CHANGE_FILE 			"" ;# Required; an ECO guidance file generated by the PT-SI write_changes command,
					   ;# as an input to the pt_eco.tcl
set PT_ECO_MODE				"default" ;# Specify the preferred flow for the PT-ECO run; default|freeze_silicon
					   ;# default: sources $PT_ECO_CHANGE_FILE and place_eco_cells in MPI mode
					   ;# freeze_silicon: add_spare_cells, place_eco_cells, sources $PT_ECO_CHANGE_FILE, and place_freeze_silicon

########################################################################################## 
## Variables for Redhawk in-design related settings 
## (used by redhawk_in_design_pnr.tcl; SNPS_INDESIGN_RH_RAIL license required)
##########################################################################################
set REDHAWK_DIR 			"" ;# Specify the path to REDHAWK executable; required 
set REDHAWK_PAD_FILE 			"" ;# Default is top level pins.
set REDHAWK_ANALYSIS_NETS 		"" ;# Required. Specify the list of power and ground nets in pairs and in separate lines for the analysis;
					   ;# for example, "VDD1 VSS1 VDD2 VSS2 VDD3 VSS3", where VDD* are power nets and VSS* are ground nets.
set REDHAWK_TECH_FILE 			"" ;# Required. Apache Technology File
set REDHAWK_MACROS 			"" ;# Optional. List of Macro names and macro directories in pairs and in separate lines;
					   ;# for example, "macro1_name macro1_directory 
					   ;#		    macro2_name macro2_directory 
					   ;#		    macro3_name macro3_directory"
set REDHAWK_SWITCH_MODEL_FILES 		"" ;# Optional. List of switch model files;
					   ;# for example: "switch_model_file1 
					   ;#               switch_model_file2 
					   ;#		    switch_model_file3"
set REDHAWK_LIB_FILES 			"" ;# Required. List of .lib files in separate lines.
					   ;# for example: "/home/lib_1.lib 
					   ;#               /home/lib_2.lib
					   ;#               /home/lib_3.lib"
set REDHAWK_APL_FILES			"" ;# Required for dynamic analysis.  List of apl files in separate lines.
					   ;# for example: "x.cdev cdev
					   ;#               x.current current
					   ;#               y.cdev cdev
					   ;#               y.current current"
set REDHAWK_EXTRA_GSR 			"" ;# Optional. Provide a file with custom Redhawk settings.
set REDHAWK_ANALYSIS 			"" ;# Required. Specify of the analyses below:
                                           ;# For Static analysis: "static"
                                           ;# For Vector-based Dynamic analysis: "dynamic_vcd"
                                           ;# For Vectorless Dynamic analysis: "dynamic_vectorless"
                                           ;# For Effective Resistance analysis: "effective_resistance"
                                           ;# For Minimum path resistance analysis: "min_path_resistance"
                                           ;# For Integrity Check: "check_missing_via"
set REDHAWK_OUTPUT_REPORT 		"" ;# Optional. Specify a file name to have the output report produced:
                                           ;# For Static or dynamic analysis: the effective voltage drop is reported
                                           ;# For Effective Resistance analysis: the effective resistance is reported
                                           ;# For Minimum path resistance analysis: the minimum path resistance is reported
                                           ;# For Integrity Check: the missing vias are reported
set REDHAWK_EM_ANALYSIS 	   	false ;# Optional. Set to true if EM analysis to be performed with static or dynamic analysis.
set REDHAWK_EM_REPORT 			"" ;# Optional. Specify a file name to have the EM output report produced.
set REDHAWK_SCRIPT_FILE 		"" ;# Optional. Specify a file name for using Redhawk standalone run tcl file.
set REDHAWK_SWITCHING_ACTIVITY_FILE 	"" ;# Required for vector-based dynamic analysis.  Format is as follows:
                                           ;# {file_format [file_name] [strip_path]}
set REDHAWK_FIX_MISSING_VIAS       	false ;# Optional. Set to true to enable inserting vias to missing via locations after the check_missing_via flow is run.
set REDHAWK_MISSING_VIA_POS_THRESHOLD	"" ;# Optional. Set to positive voltage between two overlapped layers for filtering purpose.  Default is no filtering.
set REDHAWK_RAIL_DATABASE               RAIL_DATABASE  ; #Optional. Set ICC2 Redhawk Fusion output directory.
set REDHAWK_PGA_POWER_NET               "" ; #Required.  Set one power net for PGA.
set REDHAWK_PGA_GROUND_NET              "" ; #Required.  Set one ground net for PGA
set REDHAWK_PGA_NODE                    "" ; #Required. Set the technology node such as tsmc16.
set REDHAWK_PGA_ICV_DIR                 "" ; #Required. Set the path to the ICV binary.  Example: /global/apps/icv_2018.06



##########################################################################################
## System Variables and Settings (there's no need to change them)
##########################################################################################
## Reporting 
set REPORT_QOR				true ;# true|false; RM default true; runs various reporting commands at end of each step;
					;# reporting commands vary by stage; set it to false to skip reporting
set REPORT_QOR_REPORT_POWER		true ;# true|false; RM default true;
					;# set it to false to skip report_power and report_clock_qor -type power during reporting
set REPORT_QOR_REPORT_CONGESTION	true ;# true|false; RM default reports congestion with "route_global -congestion_map_only true"
					;# at the end of preroute steps; set it to false to skip.

set search_path [list ./rm_icc2_pnr_scripts ./rm_setup ./templates $REDHAWK_SEARCH_PATH]
lappend search_path .

if {$synopsys_program_name == "icc2_shell"} {
	set_host_options -max_cores 8

	## Enable on-disk operation for copy_block to save block to disk right away
	set_app_option -name design.on_disk_operation -value true ;# default false and global-scoped
}

set sh_continue_on_error true

## Label names (while $DESIGN_NAME is the block name)
set INIT_DESIGN_BLOCK_NAME 		"init_design" 			;# Label name to be used when saving a block in init_design.tcl
set PLACE_OPT_BLOCK_NAME 		"place_opt" 			;# Label name to be used when saving a block in place_opt.tcl
set CLOCK_OPT_CTS_BLOCK_NAME 		"clock_opt_cts" 		;# Label name to be used when saving a block in clock_opt_cts.tcl
set CLOCK_OPT_OPTO_BLOCK_NAME 		"clock_opt_opto" 		;# Label name to be used when saving a block in clock_opt_opto.tcl
set ROUTE_AUTO_BLOCK_NAME 		"route_auto" 			;# Label name to be used when saving a block in route_auto.tcl
set ROUTE_OPT_BLOCK_NAME 		"route_opt" 			;# Label name to be used when saving a block in route_opt.tcl
set CHIP_FINISH_BLOCK_NAME 		"chip_finish" 			;# Label name to be used when saving a block in chip_finish.tcl
set ICV_IN_DESIGN_BLOCK_NAME 		"icv_in_design" 		;# Label name to be used when saving a block in icv_in_design.tcl

set WRITE_DATA_FROM_BLOCK_NAME 		$ICV_IN_DESIGN_BLOCK_NAME 	;# Label name of the source block in write_data.tcl;
set WRITE_DATA_BLOCK_NAME 		"write_data" 			;# Label name to be used when saving a block in write_data.tcl
									;# default is ICV_IN_DESIGN_BLOCK_NAME

set FUNCTIONAL_ECO_FROM_BLOCK_NAME	$ROUTE_OPT_BLOCK_NAME 		;# Label name of the source block in functional_eco.tcl;
									;# default is ROUTE_OPT_BLOCK_NAME
set FUNCTIONAL_ECO_BLOCK_NAME		"functional_eco"		;# Label name to be used when saving a block in functional_eco.tcl

set PT_ECO_FROM_BLOCK_NAME 		$ROUTE_OPT_BLOCK_NAME 		;# Label name of the source block in pt_eco.tcl;
									;# default is ROUTE_OPT_BLOCK_NAME
set PT_ECO_BLOCK_NAME 			"pt_eco" 			;# Label name to be used when saving a block in pt_eco.tcl

set PT_ECO_INCREMENTAL_FROM_BLOCK_NAME 	$ROUTE_OPT_BLOCK_NAME 		;# Label name of the source block in pt_eco_incremental_1.tcl;
									;# default is ROUTE_OPT_BLOCK_NAME; specify a different name if needed
set PT_ECO_INCREMENTAL_1_BLOCK_NAME 	"pt_eco_incremental_1" 		;# Label name to be used when saving a block in pt_eco_incremental_1.tcl
set PT_ECO_INCREMENTAL_2_BLOCK_NAME 	"pt_eco_incremental_2" 		;# Label name to be used when saving a block in pt_eco_incremental_2.tcl

set REDHAWK_IN_DESIGN_PNR_FROM_BLOCK_NAME $INIT_DESIGN_BLOCK_NAME	;# Label name of the starting block for redhawk_in_design_pnr.tcl;
									;# default is INIT_DESIGN_BLOCK_NAME

## Directories
set OUTPUTS_DIR	"./outputs_icc2"	;# Directory to write output data files; mainly used by write_data.tcl
set REPORTS_DIR	"./rpts_icc2"		;# Directory to write reports; mainly used by report_qor.tcl

if !{[file exists $OUTPUTS_DIR]} {file mkdir $OUTPUTS_DIR} ;# do not change this line or directory may not be created properly
if !{[file exists $REPORTS_DIR]} {file mkdir $REPORTS_DIR} ;# do not change this line or directory may not be created properly

##########################################################################################
## Hierarchical PNR Variables (used by hierarchical PNR implementation)
##########################################################################################
## For designs where the blocks are bound to abstracts
set SUB_BLOCK_REFS                   	[list ] ;# If ABSTRACT_TYPE_FOR_MPH_BLOCKS == flattened , specify design names of the immediate child blocks
                                                ;# If ABSTRACT_TYPE_FOR_MPH_BLOCKS == nested , specify design names of the physical blocks in all lower levels of physical hierarchy
                                                ;# Include the blocks that will be bound to abstracts
set USE_ABSTRACTS_FOR_BLOCKS        	[list ] ;# design names of the physical blocks in the next lower level that will be bound to abstracts

## By default, abstracts created after icv_in_design step of lower-level are used to implement the current level
## Update the following variables if you want to use abstracts created after any other step 
set BLOCK_ABSTRACT_FOR_PLACE_OPT 	"$ICV_IN_DESIGN_BLOCK_NAME" ;# Use blocks with $BLOCK_ABSTRACT_FOR_PLACE_OPT label for place_opt
set BLOCK_ABSTRACT_FOR_CLOCK_OPT_CTS    "$ICV_IN_DESIGN_BLOCK_NAME" ;# Use blocks with $BLOCK_ABSTRACT_FOR_CLOCK_OPT_CTS label for clock_opt_cts
set BLOCK_ABSTRACT_FOR_CLOCK_OPT_OPTO   "$ICV_IN_DESIGN_BLOCK_NAME" ;# Use blocks with $BLOCK_ABSTRACT_FOR_CLOCK_OPT_OPTO label for clock_opt_opto
set BLOCK_ABSTRACT_FOR_ROUTE_AUTO       "$ICV_IN_DESIGN_BLOCK_NAME" ;# Use blocks with $BLOCK_ABSTRACT_FOR_ROUTE_AUTO label for route_auto
set BLOCK_ABSTRACT_FOR_ROUTE_OPT        "$ICV_IN_DESIGN_BLOCK_NAME" ;# Use blocks with $BLOCK_ABSTRACT_FOR_ROUTE_OPT label for route_opt
set BLOCK_ABSTRACT_FOR_CHIP_FINISH      "$ICV_IN_DESIGN_BLOCK_NAME" ;# Use blocks with $BLOCK_ABSTRACT_FOR_CHIP_FINISH for chip_finish
set BLOCK_ABSTRACT_FOR_ICV_IN_DESIGN    "$ICV_IN_DESIGN_BLOCK_NAME" ;# Use blocks with $BLOCK_ABSTRACT_FOR_ICV_IN_DESIGN label for icv_in_design

set USE_ABSTRACTS_FOR_POWER_ANALYSIS 	false ;# Default false; false|true;
                                       	;# sets app option abstract.annotate_power that annotates power information in the abstracts
                                       	;# set this to true to perform power analysis inside subblocks modeled as abstracts

set USE_ABSTRACTS_FOR_SIGNAL_EM_ANALYSIS false ;# Default false; false|true;
					;# sets app option abstract.enable_signal_em_analysis 
					;# set this to true to perform signal em analysis inside abstracts

set ABSTRACT_TYPE_FOR_MPH_BLOCKS "flattened" ; # "nested | flattened", Default nested. Specifies the type of abstract to be created for MPH blocks (blocks with more than 1 level of physical hierarchy)
					;# Allowed values are nested and flattened. 
					;# when this variable is set to nested (default), preserve_block_instances option of create_abstract command is set to true (default value)
					;# when this variable is set to flattened , preserve_block_instances option of create_abstract command is set to false

set CHECK_HIER_TIMING_CONSTRAINTS_CONSISTENCY true ;# Determines whether the consistency of top and block timing constraints is checked during the check_design command
					;# The variable in turn sets the application option abstract.check_constraints_consistency to true

########################################################################################## 
## Hierarchical PNR Variables for clock_opt_cts related settings (used by clock_opt_cts.tcl)
##########################################################################################
set PROMOTE_CLOCK_BALANCE_POINTS	false ;# Default false. When implementing intermediate and top levels of physical hierarchy,
					;# set this variable to true to promote clock balance points from sub-blocks.
					;# Leave this variable to its default value, if the needed clock balance points for the pins
					;# inside sub-blocks are applied from the top-level itself.

########################################################################################## 
## Hierarchical PNR Variables for designs where some of the blocks are bound to ETMs
##########################################################################################
set WRITE_DATA_FOR_ETM_GENERATION       false ;# Default false. Set it to true, for writing out required design data for ETM Generation in PrimeTime 
set WRITE_DATA_FOR_ETM_BLOCK_NAME       $ICV_IN_DESIGN_BLOCK_NAME ;# Name of the starting block for the write_data_for_etm step


## ICC2-RM provides additional files (flavors) to override RM default settings for high connectivity, run time and area/power focused designs.
#  These files are under rm_icc2_pnr_scripts/ :  
#  flavor.high_connectivity_high_congestion_focused.tcl, flavor.area_power_focused.tcl and flavor.run_time_focused.tcl
#  You can use the ADDITIONAL_FLAVOR variable to control whether to use these flavors.
set ADDITIONAL_FLAVOR "" 	;# default unspecified; if unspecified, runs RM default flow that works/balances all PPA
				;# set it to high_connectivity_high_congestion for high connectivity design styles with heavy congestions
				;# set it to area_power for extra area and power optimizations
				;# set it to run_time if run time is the primary concern

puts "RM-info: Completed script [info script]\n"


